-- CSC2021 Coursework exercise 
-- semester 2 2016

-- Access Control model

-- Update this model with your answers to the questions and
-- submit the final model to Ness.

-- Modified by Dylan McKee on 02/04/2016.

-- I used the lecture notes, along with the following book, to help me understand VDM fully and complete this coursework:
-- Fitzgerald, J. (2009) Modelling Systems. Second Edition. Cambridge: Cambridge University Press. 


types
Action = <read>|<write>|<append>|<login>|<root>;
 
Resource = token;
Privilege :: res: Resource
             act: Action;

Person = token;
Allocation = map Person to set of Privilege;
          
values

ReadFile1 = mk_Privilege(mk_token("File1"),<read>);
WriteFile1 = mk_Privilege(mk_token("File1"),<write>);
ReadFile2 = mk_Privilege(mk_token("File2"),<read>);
AppendFile2 = mk_Privilege(mk_token("File2"),<append>);
LoginServer = mk_Privilege(mk_token("Server"),<login>);
RootServer = mk_Privilege(mk_token("Server"),<root>);
ReadDatabase = mk_Privilege(mk_token("Dbase"),<read>);
WriteDatabase = mk_Privilege(mk_token("Dbase"),<write>);
AppendDatabase = mk_Privilege(mk_token("Dbase"),<append>);

chris:Person = mk_token("chris");
sam:Person = mk_token("sam");
pat:Person = mk_token("pat");

alloc1: Allocation = { chris |-> {ReadFile1,WriteFile1,AppendFile2},
                       sam |-> {ReadFile1,WriteFile1,LoginServer,RootServer},
                       pat |-> {AppendFile2,LoginServer,WriteDatabase,AppendDatabase}};
       
types

Policy :: partitions : set of (set of Privilege)
          min: map Privilege to nat
          max: map Privilege to nat;
          
values
policy1: Policy = mk_Policy({{ReadFile2, AppendFile2},  -- partitions
		 												 {ReadFile1,ReadFile2},
		 												 {ReadDatabase,AppendDatabase}},
                            {ReadFile1 |-> 1, RootServer |-> 1}, -- max mapping
                            {LoginServer |-> 4, RootServer |-> 2});  -- min mapping   
                                    
state Organisation of
  policy : Policy
  alloc : Allocation
  init org == 
      org = mk_Organisation(policy1,alloc1)
      
  inv mk_Organisation(policy, alloc) ==
  	CheckAllocationBounds(policy, alloc) and
  	CheckSeperationOfDutiesConstraint(policy, alloc)
  	
  	
end

                         
functions
	NumAllocated: Privilege * Allocation -> nat
	NumAllocated(priv, alloc) ==
	  /**
	   * Return the cardinality of the number of people in the 
	   * allocation have the privillage allocated to them.
	   */
		card {person | person in set dom alloc & priv in set alloc(person)};
		
	CheckAllocationBounds: Policy * Allocation -> bool
	CheckAllocationBounds(policy, alloc) ==
		/**
		 * Ensure that the privilage has been allocated the correct amount of times in the allocation, 
		 * as specified in the policy. Return true if the allocation amount is valid, or false if it
		 * is invalid.
		 * 
		 * Firstly, loop we loop through each max mapping and ensure that each task has not been allocated
		 * a number of times > than the max value. Then, we loop through the min mapping and ensure that each
		 * task has not been allocated < times than the min value.
		 */
		 card {priv | priv in set dom policy.min & NumAllocated(priv, alloc) < policy.min(priv)} = 0 and 
		 card {priv | priv in set dom policy.max & NumAllocated(priv, alloc) > policy.max(priv)} = 0;
		 
	CheckSeperationOfDutiesConstraint: Policy * Allocation -> bool
	CheckSeperationOfDutiesConstraint(policy, alloc) ==
		/**
		 * Ensure that no person can have more than one privilege from a partition. Return true if
		 * the constraint has been met, or false if it has not been satisfied.
		 *
		 * Checking for this constraint by using set comprenension to loop through each person within the allocation, 
		 * and ensuring that only a maximum of one of the privilages within each partition has been applied
		 * for each person within the allocation.
		 */
		 card {person | person in set dom alloc & forall partition in set policy.partitions & 
			forall x, y in set partition & not (NumAllocated(x, alloc) = 1 and NumAllocated(y, alloc) = 1)} = 0;
		 
		 
operations
	AddPriv:  Person * Privilege ==> ()
	AddPriv(person, priv) ==
		/**
		 * Add the specified privilege to the person's set of privilages within
		 * the organisation by performing a set union between a set of the person's current
		 * privilages, and a set containing the new privilage to add.
		 * 
		 * This operation uses a precondition to ensure that the privilage being added can be added
		 * in terms of allocation boundaries (i.e. has been allocated less than the max. times allocated), and 
		 * in terms of satisfying the seperation of duties constraint, before executing to actually
		 * add the privilage to the person's privilages within the organisation.
		 *
		 */
		 Organisation.alloc(person) := Organisation.alloc(person) union {priv}
		 -- This precondition checks the allocations constraint to ensure that it is safe to add the privilage.
		 pre (NumAllocated(priv, Organisation.alloc) < Organisation.policy.max(priv))
		 and CheckSeperationOfDutiesConstraint(Organisation.policy, Organisation.alloc);
		 
		 
	RevokePriv:  Person * Privilege ==> ()
	RevokePriv(person, priv) ==
		/**
		 * Remove the specified privilege to the person's set of privilages within
		 * the organisation by performing a set difference operation between the person's
		 * current privilages and the privilage to remove.
		 *
		 * This operation uses a precondition to ensure that the privilage being added can be removed
		 * in terms of allocation boundaries (i.e. has been allocated more than the min. times allocated), and 
		 * in terms of satisfying the seperation of duties constraint, before executing to actually
		 * removing the privilage from the person's privilages within the organisation.
		 *
		 */
		 Organisation.alloc(person) := Organisation.alloc(person) \ {priv}
		 -- This precondition checks the allocations constraint to ensure that it is safe to remove the privilage.
		 pre (NumAllocated(priv, Organisation.alloc) > Organisation.policy.min(priv))
		 and CheckSeperationOfDutiesConstraint(Organisation.policy, Organisation.alloc);
		 
		 
		 
		 
		 
